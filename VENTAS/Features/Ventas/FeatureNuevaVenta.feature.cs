// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SigesCore.Features.Ventas
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NuevaVenta")]
    public partial class NuevaVentaFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Ventas", "NuevaVenta", "Registrar una venta", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "FeatureNuevaVenta.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una nueva venta con pago al contado")]
        [NUnit.Framework.CategoryAttribute("NuevaVenta")]
        public async System.Threading.Tasks.Task RegistroDeUnaNuevaVentaConPagoAlContado()
        {
            string[] tagsOfScenario = new string[] {
                    "NuevaVenta"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una nueva venta con pago al contado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
 await testRunner.AndAsync("Seleccionar tipo de pago \"contado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Nueva V" +
                        "enta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una nueva venta con pago al crédito rápido")]
        public async System.Threading.Tasks.Task RegistroDeUnaNuevaVentaConPagoAlCreditoRapido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una nueva venta con pago al crédito rápido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito rapido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
 await testRunner.AndAsync("Ingresar monto inicial de crédito rapido \'20\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Nueva V" +
                        "enta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una nueva venta con pago al crédito rápido sin inicial")]
        public async System.Threading.Tasks.Task RegistroDeUnaNuevaVentaConPagoAlCreditoRapidoSinInicial()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una nueva venta con pago al crédito rápido sin inicial", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 38
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito rapido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una nueva venta con pago al crédito configurado")]
        public async System.Threading.Tasks.Task RegistroDeUnaNuevaVentaConPagoAlCreditoConfigurado()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una nueva venta con pago al crédito configurado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 49
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 50
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 51
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito configurado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
 await testRunner.AndAsync("Ingresar monto inicial \'20\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
 await testRunner.AndAsync("Ingresar el número de coutas \'3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
 await testRunner.AndAsync("Ingresar fecha \'1 de cada mes\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
 await testRunner.AndAsync("Click en generar coutas", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
 await testRunner.AndAsync("Click en Aceptar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Nueva V" +
                        "enta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una nueva venta con pago al crédito configurado sin inicial")]
        public async System.Threading.Tasks.Task RegistroDeUnaNuevaVentaConPagoAlCreditoConfiguradoSinInicial()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una nueva venta con pago al crédito configurado sin inicial", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 68
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 69
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 70
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito configurado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
 await testRunner.AndAsync("Ingresar el número de coutas sin inicial \'3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 78
 await testRunner.AndAsync("Ingresar fecha \'1 de cada mes\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
 await testRunner.AndAsync("Click en generar coutas", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 80
 await testRunner.AndAsync("Click en Aceptar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta modo caja con pago al contado")]
        [NUnit.Framework.CategoryAttribute("VentaModoCaja")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaModoCajaConPagoAlContado()
        {
            string[] tagsOfScenario = new string[] {
                    "VentaModoCaja"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta modo caja con pago al contado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 86
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 87
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 88
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 89
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 90
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 91
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 92
 await testRunner.AndAsync("Seleccionar un punto de venta \'PRINCIPAL\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 93
 await testRunner.AndAsync("Seleccionar un vendedor \'KETHY\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 94
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 95
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 96
 await testRunner.AndAsync("Seleccionar tipo de pago \"contado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 98
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Venta M" +
                        "odo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 99
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta modo caja con pago al crédito rápido")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaModoCajaConPagoAlCreditoRapido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta modo caja con pago al crédito rápido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 102
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 103
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 104
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 105
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 106
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 107
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 108
 await testRunner.AndAsync("Seleccionar un punto de venta \'PRINCIPAL\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
 await testRunner.AndAsync("Seleccionar un vendedor \'KETHY\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 110
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 111
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 112
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito rapido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 113
 await testRunner.AndAsync("Ingresar monto inicial de crédito rapido \'20\' en el módulo de \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 114
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 115
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Venta M" +
                        "odo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 116
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta modo caja con pago al crédito rápido sin inicial")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaModoCajaConPagoAlCreditoRapidoSinInicial()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta modo caja con pago al crédito rápido sin inicial", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 119
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 120
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 121
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 122
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 123
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 124
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 125
 await testRunner.AndAsync("Seleccionar un punto de venta \'PRINCIPAL\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 126
 await testRunner.AndAsync("Seleccionar un vendedor \'KETHY\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 127
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 128
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 129
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito rapido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 130
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta modo caja con pago al crédito configurado")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaModoCajaConPagoAlCreditoConfigurado()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta modo caja con pago al crédito configurado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 133
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 134
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 135
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 136
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 137
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 138
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 139
 await testRunner.AndAsync("Seleccionar un punto de venta \'PRINCIPAL\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 140
 await testRunner.AndAsync("Seleccionar un vendedor \'KETHY\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 141
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 142
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 143
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito configurado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 144
 await testRunner.AndAsync("Ingresar monto inicial \'20\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 145
 await testRunner.AndAsync("Ingresar el número de coutas \'3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 146
 await testRunner.AndAsync("Ingresar fecha \'1 de cada mes\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 147
 await testRunner.AndAsync("Click en generar coutas", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 148
 await testRunner.AndAsync("Click en Aceptar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 149
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 150
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Venta M" +
                        "odo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 151
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una modo caja con pago al crédito configurado sin inicial")]
        public async System.Threading.Tasks.Task RegistroDeUnaModoCajaConPagoAlCreditoConfiguradoSinInicial()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una modo caja con pago al crédito configurado sin inicial", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 154
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 155
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 156
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 157
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 158
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 159
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 160
 await testRunner.AndAsync("Seleccionar un punto de venta \'PRINCIPAL\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 161
 await testRunner.AndAsync("Seleccionar un vendedor \'KETHY\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 162
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 163
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Venta Modo Caja\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 164
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito configurado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 165
 await testRunner.AndAsync("Ingresar el número de coutas sin inicial \'3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 166
 await testRunner.AndAsync("Ingresar fecha \'1 de cada mes\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 167
 await testRunner.AndAsync("Click en generar coutas", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 168
 await testRunner.AndAsync("Click en Aceptar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 169
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta por contigencia con pago al contado")]
        [NUnit.Framework.CategoryAttribute("VentaContingencia")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaPorContigenciaConPagoAlContado()
        {
            string[] tagsOfScenario = new string[] {
                    "VentaContingencia"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta por contigencia con pago al contado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 173
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 174
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 175
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Por Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 176
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 177
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 178
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 179
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 180
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 181
 await testRunner.AndAsync("Ingresar fecha de emisión de la venta \'30/01/2025\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 182
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Venta por Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 183
 await testRunner.AndAsync("Ingresar el número de documento \'B002-10\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 184
 await testRunner.AndAsync("Seleccionar tipo de pago \"contado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 185
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 186
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Venta p" +
                        "or Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 187
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta por contigencia con pago al crédito rápido")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaPorContigenciaConPagoAlCreditoRapido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta por contigencia con pago al crédito rápido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 190
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 191
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Por Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 192
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 193
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 194
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 195
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 196
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 197
 await testRunner.AndAsync("Ingresar fecha de emisión de la venta \'1/01/2025\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 198
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'BOLETA\' en el módulo de \"Venta por Contingencia\"" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 199
 await testRunner.AndAsync("Ingresar el número de documento \'10\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 200
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito rapido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 201
 await testRunner.AndAsync("Ingresar monto inicial de crédito rapido \'20\' en el módulo de \"Venta por Continge" +
                        "ncia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 202
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 203
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Venta p" +
                        "or Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 204
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta por contigencia con pago al crédito rápido sin inicial")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaPorContigenciaConPagoAlCreditoRapidoSinInicial()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta por contigencia con pago al crédito rápido sin inicial", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 207
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 208
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Por Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 209
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 210
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 211
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 212
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 213
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 214
 await testRunner.AndAsync("Ingresar fecha de emisión de la venta \'30/01/2025\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 215
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Venta por Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 216
 await testRunner.AndAsync("Ingresar el número de documento \'B002-10\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 217
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito rapido\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 218
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta por contigencia con pago al crédito configurado")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaPorContigenciaConPagoAlCreditoConfigurado()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta por contigencia con pago al crédito configurado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 221
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 222
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Por Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 223
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 224
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 225
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 226
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 227
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 228
 await testRunner.AndAsync("Ingresar fecha de emisión de la venta \'30/01/2025\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 229
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Venta por Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 230
 await testRunner.AndAsync("Ingresar el número de documento \'10\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 231
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito configurado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 232
 await testRunner.AndAsync("Ingresar monto inicial \'20\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 233
 await testRunner.AndAsync("Ingresar el número de coutas \'3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 234
 await testRunner.AndAsync("Ingresar fecha \'1 de cada mes\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 235
 await testRunner.AndAsync("Click en generar coutas", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 236
 await testRunner.AndAsync("Click en Aceptar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 237
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 238
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Venta p" +
                        "or Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 239
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta por contigencia con pago al crédito configurado sin inicial" +
            "")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaPorContigenciaConPagoAlCreditoConfiguradoSinInicial()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta por contigencia con pago al crédito configurado sin inicial" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 241
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 242
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 243
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Venta Por Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 244
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 245
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 246
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 247
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 248
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 249
 await testRunner.AndAsync("Ingresar fecha de emisión de la venta \'30/01/2025\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 250
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Venta por Contingencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 251
 await testRunner.AndAsync("Ingresar el número de documento \'10\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 252
 await testRunner.AndAsync("Seleccionar tipo de pago \"credito configurado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 253
 await testRunner.AndAsync("Ingresar el número de coutas sin inicial \'3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 254
 await testRunner.AndAsync("Ingresar fecha \'1 de cada mes\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 255
 await testRunner.AndAsync("Click en generar coutas", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 256
 await testRunner.AndAsync("Click en Aceptar", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 257
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta con guía de remisión con transporte público")]
        [NUnit.Framework.CategoryAttribute("VentaGuiaRemisión")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaConGuiaDeRemisionConTransportePublico()
        {
            string[] tagsOfScenario = new string[] {
                    "VentaGuiaRemisión"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta con guía de remisión con transporte público", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 261
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 262
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 263
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 264
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 265
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 266
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 267
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 268
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 269
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'BOLETA\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 270
 await testRunner.AndAsync("Click en el botón Guía", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 271
 await testRunner.AndAsync("Ingresar la fecha de inicio de traslado \'10/02/2025\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 272
 await testRunner.AndAsync("Ingresar el peso bruto total \'50\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 273
 await testRunner.AndAsync("Ingresar el número de bultos \'3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 274
 await testRunner.AndAsync("Ingresar el RUC del transportista \'10614499015\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 275
 await testRunner.AndAsync("Seleccionar la modalidad del transporte \"TRANSPORTE PÚBLICO\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 276
 await testRunner.AndAsync("Ingresar el ubigeo de la dirección de origen \"HUANUCO - LEONCIO PRADO - HERMILIO " +
                        "VALDIZAN\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 277
 await testRunner.AndAsync("Ingresar el detalle de la dirección de origen \"AV. AGRICULTURA\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 278
 await testRunner.AndAsync("Ingresar el ubigeo de la dirección de destino \"HUANUCO - LEONCIO PRADO - DANIEL A" +
                        "LOMIA ROBLES\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 279
 await testRunner.AndAsync("Ingresar el detalle de la dirección de destino \"JR. SVEN ERICSON N° 109\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 280
 await testRunner.AndAsync("Click en el botón aceptar guía de remisión", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 281
 await testRunner.AndAsync("Seleccionar tipo de pago \"contado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 282
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 283
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Nueva V" +
                        "enta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 284
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta con guía de remisión con transporte privada")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaConGuiaDeRemisionConTransportePrivada()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta con guía de remisión con transporte privada", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 286
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 287
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 288
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 289
 await testRunner.AndAsync("Agregar concepto por \'barra\' y valor \'1010-3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 290
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 291
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 292
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 293
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 294
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'BOLETA\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 295
 await testRunner.AndAsync("Click en el botón Guía", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 296
 await testRunner.AndAsync("Ingresar la fecha de inicio de traslado \'10/02/2025\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 297
 await testRunner.AndAsync("Ingresar el peso bruto total \'50\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 298
 await testRunner.AndAsync("Ingresar el número de bultos \'3\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 299
 await testRunner.AndAsync("Seleccionar la modalidad del transporte \"TRANSPORTE PRIVADO\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 300
 await testRunner.AndAsync("Ingresar el DNI del conductor \'71310154\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 301
 await testRunner.AndAsync("Ingresar la licencia del conductor \'M-71310154\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 302
 await testRunner.AndAsync("Ingresar la placa del vehículo \'2232-8S\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 303
 await testRunner.AndAsync("Ingresar el ubigeo de la dirección de origen \"HUANUCO - LEONCIO PRADO - HERMILIO " +
                        "VALDIZAN\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 304
 await testRunner.AndAsync("Ingresar el detalle de la dirección de origen \"AV. AGRICULTURA\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 305
 await testRunner.AndAsync("Ingresar el ubigeo de la dirección de destino \"HUANUCO - LEONCIO PRADO - DANIEL A" +
                        "LOMIA ROBLES\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 306
 await testRunner.AndAsync("Ingresar el detalle de la dirección de destino \"JR. SVEN ERICSON N° 109\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 307
 await testRunner.AndAsync("Click en el botón aceptar guía de remisión", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 308
 await testRunner.AndAsync("Seleccionar tipo de pago \"contado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 309
 await testRunner.AndAsync("Seleccionar el medio de pago \'TDEB\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 310
 await testRunner.AndAsync("Rellene datos de la tarjeta \'BBVA\' , \'MASTER\' y \'206556\' en el módulo de \"Nueva V" +
                        "enta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 311
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Registro de una venta con detalle unificado")]
        [NUnit.Framework.CategoryAttribute("VentaDetalleUnificado")]
        public async System.Threading.Tasks.Task RegistroDeUnaVentaConDetalleUnificado()
        {
            string[] tagsOfScenario = new string[] {
                    "VentaDetalleUnificado"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registro de una venta con detalle unificado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 315
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 316
 await testRunner.GivenAsync("Inicio de sesion con usuario \'admin@plazafer.com\' y contrasena \'calidad\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 317
 await testRunner.WhenAsync("Seleccionar Venta y luego \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "option",
                            "value"});
                table1.AddRow(new string[] {
                            "BARRA",
                            "1010-3"});
                table1.AddRow(new string[] {
                            "SELECCION",
                            "400001474"});
                table1.AddRow(new string[] {
                            "SELECCION",
                            "400000437"});
#line 318
 await testRunner.WhenAsync("Agregar los siguientes conceptos:", ((string)(null)), table1, "When ");
#line hidden
#line 323
 await testRunner.AndAsync("Ingresar cantidad \'2\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 324
 await testRunner.AndAsync("Ingresar precio unitario \'30\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 325
 await testRunner.AndAsync("Activar IGV \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 326
 await testRunner.AndAsync("Activar Detalle Unificado \'SI\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 327
 await testRunner.AndAsync("Seleccionar tipo de cliente \'DNI\' \'72380461\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 328
 await testRunner.AndAsync("Seleccionar tipo de comprobante \'NOTA\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 329
 await testRunner.AndAsync("Seleccionar tipo de pago \"contado\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 330
 await testRunner.AndAsync("Seleccionar el medio de pago \'EF\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 331
 await testRunner.AndAsync("Rellene datos de la tarjeta \'\' , \'\' y \'200\' en el módulo de \"Nueva Venta\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 332
 await testRunner.ThenAsync("Guardar venta", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
